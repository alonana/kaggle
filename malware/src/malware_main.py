import pathlib
from datetime import datetime

import pandas as pd

DATA_FOLDER = "../data"
TRAIN_DATA = "%s/train.csv" % DATA_FOLDER

OUTPUT_FOLDER = "../output/"


def debug(msg, new_line=False):
    separator = ''
    if new_line:
        separator = '\n'
    print("{} ===> {}{}".format(datetime.now(), separator, msg))


class Malware:
    def __init__(self, csv_path, train_mode, calculation_limit_rows=None):
        pathlib.Path(OUTPUT_FOLDER).mkdir(parents=True, exist_ok=True)
        self.train_mode = train_mode
        self.calculation_limit_rows = calculation_limit_rows
        if calculation_limit_rows:
            self.head_lines = min(calculation_limit_rows, 10)
        else:
            self.head_lines = 5

        self.csv_path = csv_path
        self.chunk_size = 100000

        for df in self.read_chunked_csv():
            debug("original data for path {} is:\n{}".format(csv_path, df.head(self.head_lines)))
            debug("{} rows loaded".format(df.shape[0]))
            break

    def read_chunked_csv(self, use_cols=None):
        return pd.read_csv(self.csv_path, nrows=self.calculation_limit_rows, chunksize=self.chunk_size,
                           usecols=use_cols)

    def value_counts(self, col):
        debug('values count for {}'.format(col))
        df = self.read_chunked_csv(use_cols=[col])
        all = None
        i = 0
        for section in df:
            debug('read so far {:,}'.format(i * self.chunk_size))
            i += 1
            counts = section[col].value_counts().to_frame()
            counts.columns = ['count']
            counts.index.name = col
            counts = counts[counts['count'] > 1]
            if all is None:
                all = counts
            else:
                all = pd.concat([all, counts])

            debug(all)
        sums = all.groupby([col]).sum()
        sums = sums[sums['count'] > 1]
        debug(sums)


pd.set_option('display.max_rows', 5000)
pd.set_option('display.max_columns', 5000)
pd.set_option('display.width', 100000)

debug('Starting')
train = Malware(TRAIN_DATA, True, calculation_limit_rows=None)
train.value_counts('MachineIdentifier')
